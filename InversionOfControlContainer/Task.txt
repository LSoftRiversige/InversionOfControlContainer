---- basic functionality
1) +resolving concrete classes (witout registration)
2) +resolve interfaces
3) +dependecnies can have one constructor with various paramters
4) +unit tests for all scenarious

---- advanced features
4) +singleton registration
5) +circular dependencies
6) +properties injection (with attributes)
7) +Lazy<T> inejction
8) +dependencies registration from file

DEADLINE: 10 january

https://github.com/LSoftRiversige/InversionOfControlContainer.git


первый может быть класс, второй не может быть интерфейсом
ExceptionHasCorrectMessage
второй параметр может быть класс или структура и не может быть 
bind - get в тестах
var exception = Assert.Throws<>
bind может возвращать IClassDescription
проверить что класс не абстрактный класс
внутри модуля можно использовать ссылки на классы
свойство пометить атрибутом Inject и означивать такие аргументы
создавать сразу дикшенри
игнорирование возврата значения метода - плохой путь
использовать метод Any в проверке конструктора с параметрами
нарушение единой причины для изменения - класс описание класса делает еще инъекцию свойств
проверка цикличности перенести в Bind, заменить stack
использовать TryGetValue при поиске на словарях
Lazy задавать при регистрации
проверка стека в отдельном классе
если не класс и не интерфейс то исключение
локальная переменная объявляется и сразу присваивается значение
CreateObject 2 отвественности
если в методе много аргументов постараться выделить класс